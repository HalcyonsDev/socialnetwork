spring:
  application:
    name: auth-service

  config:
    import: optional:file:.env[.properties]

  kafka:
    bootstrap-servers: ${KAFKA_BOOTSTRAP_SERVERS}

  data:
    redis:
      host: ${REDIS_HOST}
      port: ${REDIS_PORT}
      password: ${REDIS_PASSWORD}

  security:
    oauth2:
      client:
        registration:
          github:
            client-id: ${OAUTH2_GITHUB_CLIENT_ID}
            client-secret: ${OAUTH2_GITHUB_CLIENT_SECRET}
            redirect-uri: ${OAUTH2_REDIRECT_URI}
            scope:
              - user:email
              - read:user

          google:
            client-id: ${OAUTH2_GOOGLE_CLIENT_ID}
            client-secret: ${OAUTH2_GOOGLE_CLIENT_SECRET}
            redirect-uri: ${OAUTH2_REDIRECT_URI}
            scope:
              - email
              - profile

          discord:
            client-id: ${OAUTH2_DISCORD_CLIENT_ID}
            client-secret: ${OAUTH2_DISCORD_CLIENT_SECRET}
            redirect-uri: ${OAUTH2_REDIRECT_URI}
            authorization-grant-type: ${OAUTH2_DISCORD_AUTHORIZATION_GRANT_TYPE}
            scope:
              - identify
              - email
        provider:
          discord:
            authorization-uri: ${PROVIDER_DISCORD_AUTHORIZATION_URI}
            token-uri: ${PROVIDER_DISCORD_TOKEN_URI}
            user-info-uri: ${PROVIDER_DISCORD_USER_INFO_URI}
            user-name-attribute: ${PROVIDER_DISCORD_USER_NAME_ATTRIBUTE}


server:
  port: 8082

eureka:
  client:
    service-url:
      defaultZone: ${EUREKA_CLIENT_DEFAULT_ZONE}
    fetch-registry: true
    register-with-eureka: true
    enabled: true

jwt:
    issuer: jwt-library
    access-token:
      private-key: ${PRIVATE_KEY}
      public-key: ${PUBLIC_KEY}
      validity: ${ACCESS_TOKEN_VALIDITY}
    refresh-token:
      validity:  ${REFRESH_TOKEN_VALIDITY}

private:
  secret: ${PRIVATE_SECRET}

2fa:
  qr_prefix: ${2FA_QR_PREFIX}